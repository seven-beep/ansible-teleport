---
- name: Set fact is_container
  ansible.builtin.set_fact:
    is_container: true
  when: >
    (ansible_virtualization_type is defined and
      (ansible_virtualization_type == "docker" or ansible_virtualization_type == "containerd")
    )

- name: Check if teleport is already installed.
  ansible.builtin.command:
    cmd: which teleport
  failed_when: teleport_installed.rc not in [0,1]
  changed_when: false
  register: teleport_installed

- name: "Lookup the cloud server version if none was provided"
  ansible.builtin.include_tasks: detect_cloud_version.yml
  when:
    - teleport_autodetect_version
    - teleport_version == ""

- name: "Check if a teleport configuration is present"
  ansible.builtin.stat:
    path: "{{ teleport_config_path }}"
  register:  teleport_config_file

- name: "Save the precedent configuration or erase database artifacts"
  ansible.builtin.include_tasks: auth_conf.yml
  when: teleport_config_file.stat.exists is true

- name: "Dispatch on installation method"
  ansible.builtin.include_tasks: "{{ 'install_via_' + teleport_install_method + '.yml' }}"
  when: teleport_installed.rc == 1 is true or teleport_force_reinstall

- name: Create teleport config
  become: yes
  ansible.builtin.template:
    src: "{{ teleport_config_template }}"
    dest: "{{ teleport_config_path }}"
    owner: "root"
    group: "root"
    mode: "0600"
    backup: "{{ backup_teleport_config }}"
  when: teleport_template_config
  notify: Reload_Teleport

- name: "Configure systemd service"
  ansible.builtin.include_tasks: "systemd.yml"
  when: teleport_control_systemd

- name: 'Enable teleport managed updates'
  ansible.builtin.command:
    cmd: 'teleport-update enable'
  changed_when: true
  when: teleport_managed_updates
